#include <iostream>
#include <vector>

using namespace std;

vector<int> Gvertex_x;
vector<int> Gvertex_y;
vector<int> Gsum;
int Gtime[5];
int gap = 0;

vector<int> Garrive_time;
vector<int> location_x;
vector<int> location_y;


void myin(){
    int num;
    cin >> num;

    for (int i =0; i < num; i++){
        int x, y;
        cin >> x >> y;

        int z = x + y;
        Gvertex_x.push_back(x);
        Gvertex_y.push_back(y);
        Gsum.push_back(z);

    }

    cin >> Gtime[0] >> Gtime[1] >> Gtime[2] >> Gtime[3] >> Gtime[4];

    Gvertex_x.push_back(Gvertex_x[0]);
    Gvertex_y.push_back(Gvertex_y[0]);
    Gsum.push_back(Gsum[0]);
    location_x.push_back(Gvertex_x[0]);
    location_y.push_back(Gvertex_y[0]);

}

void compute(){
    for (int i = 1; i < Gsum.size(); i++){
        int sum_gap = Gsum[i] - Gsum[i-1];
        gap += abs(sum_gap);

        int x_gap = Gvertex_x[i] == Gvertex_x[i-1];
//        int y_gap = Gvertex_y[i] > Gvertex_y[i-1];

        for (int j = 0; j < gap ; j++){
            if (sum_gap > 0){
                if (x_gap == 1){
                    location_x.push_back(*location_x.end()+1);
                    location_y.push_back(*location_y.end());
                }else{
                    location_x.push_back(*location_x.end());
                    location_y.push_back(*location_y.end()+1);
                }
            }else{
                if (x_gap == 1){
                    location_x.push_back(*location_x.end()-1);
                    location_y.push_back(*location_y.end());
                }else{
                    location_x.push_back(*location_x.end());
                    location_y.push_back(*location_y.end()-1);
                }
            }

        }

    }

}

void myout(){
    for(auto element: Gtime){
        int num = element % gap;
        int x_value = location_x[num];
        int y_value = location_y[num];

        cout << x_value <<" " << y_value << endl;

    }

}





int main(){
    myin();
    compute();
    myout();

}
